CompletableFuture
Future 와 CompletionStage

CompletableFuture
- 2014년에 발표된 java8에서 처음 도입
- 비동기 프로그래밍 지원
- 람다 메소드, 래퍼런스등 지원

CompletableFuture 클래스

public class CompletableFuture<T> implements Future<T>, CompletionStage<T>

Future
 - 비동기적인 작업을 수행
 - 해당 작업이 완료되면 결과를 반환하는 인터페이스

 CompletionStage
 - 비동기적인 작업을 수행
 - 해당 작업이 완료되면 결과를 처리하거나 다른 CompletionStage를 연결하는 인터페이스

 ExecutorService
 - 쓰레드 풀을 이용하여 비동기적으로 작업을 실행하고 관리
 - 별도의 쓰레드를 생성하고 관리하지 않아도 되므로, 코드를 간결하게 유지 가능
 - 쓰레드 풀을 이용하여 자원을 효율적으로 관리

execute : Runnable 인터페이스를 구현한 작업을 쓰레드 풀에서 비동기적으로 실행
submit : Callable 인터페이스를 구현한 작업을 쓰레드 풀에서 비동기적으로 실행하고, 해당 작업을 future<T> 객체로 반환
shutdown: ExecutorService를 종료. Task를 더 이상 받지 않는다.

Executors - ExecutorService 생성
 - newSingleThreadExcecutor: 단일 쓰레드로 구성된 스레드 풀을 생성. 한 번에 하나의 작업만 실행.
 - newFixedThradPool : 고정된 크기의 쓰레드 풀을 생성. 크기는 안자로 주어진 n과 동일
 - newCachedThradPool: 사용 가능한 쓰레드가 없다면 새로 생성해서 작업을 처리하고 있다면. 재사용. 쓰레드가 일정 시간 사용되지 않으면 회수
 - newScheduledThreadPool : ㅅ스케줄링 기능을 갖춘 고정 크기의 쓰레드 풀을 생성.
 - newWorkstealingPool: work steal 알고리즘을 사용하는 ForkJoinPool을 생성.


FutureHelper
 - getFuture : 새로운 쓰레드를 생성하여 1을 반환
 - getFutureCompleteAfter1S : 새로운 쓰레드를 생성하고 1초 대기 후 1을 반환


 Future : isDone, isCancelled()
 - future의 상태를 반환
 - isDone : task가 완료되었다면, 원인과 상관없이 true 반환
 - isCancelled : task가 명시적으로 취소된 경우, true를 반환.

 Future : get()
 - 결과를 구할 때까지 thread가 계속 block
 - future에서 무한루프나 오랜 시간이 걸린다면 thread가 blocking 상태를 유지

 Future: get(Long timeout, TimeUnit unit )
  - 결과를 구할 때까지 timeout동안 thread가 block
  - timeout이 넘어가도 응답이 반환되지 않으면 TimeoutException 발생.

  Future: cancle(boolean mayInterruptIfRunning)
  - future의 작업 실행을 취소
  - 취소할 수 없는 상황이라면 false를 반환
  - mayInterruptIfRunning가 false라면 시작하지 않은 작업에 대해서만 취소

  Future 인터페이스의 한계
  - cancel을 제외하고 외부에서 future를 컨트롤 할 수 없다.
  - 반환된 결과를 get()해서 접근하기 때문에 비동기 처리가 어렵다.
  - 완료되거나 에러가 발생했는지 구분하기가 어렵다.