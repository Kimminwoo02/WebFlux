NIO
- java New Input/Output
- 1.4에서 처음 도입
- 파일과 네트워크에 데이터를 읽고 쓸 수 있는 API를 제공
- buffer 기반
- non-blocking 지원
- selector, channel 도입을 높은 성능 보장

Channel 과 Buffer
- 데이터를 읽을 때 : 적절한 크기의 buffer를 생성하고 Channel의 read 메서드를 사용하여 데이터를 buffer에 저장
- 데이터를 쓸 때 : 먼저 buffer에 데이터를 저장하고 Channel의 Write() 메서드를 사용하여 목적지로 전달
- clear : 메서드로 초기화하여 다시 사용 가능

Buffer의 종류
- ByteBuffer
- CharBuffer
- ShortBuffer
- IntBuffer
- LongBuffer
- FloatBuffer
- DoubleBuffer

Buffer의 위치속성
- Capacity : Buffer가 저장할 수 있는 데이터의 최대 크기, Buffer 생성 시 결정되며 변경 불가
- Position : Buffer에서 현재 위치를 가리킨다.버퍼에서 데이터를 읽거나 쓸 때 해당 위치부터 시작.
- limit : Buffer에서 데이터를 읽거나 쓸 수 있는 마지막 위치 limit 이후로 데이터를 읽거나 쓰기 불가
- mark : 현재 position 위치를 mark로 지정할 수 있고 reset 호출 시 position을 mark로 이동


DirectByteBuffer
- native 메모리에 저장
- 커널 메모리에서 복사를 하지 않으므로 데이터를 읽고 쓰는 속도가 빠르다.
- 비용이 많이 드는 system call을 사용하므로 allocate, dealoocate가 느리다.

HeapByteBuffer
- JVM heap메모리에 저장. byte array를 매핑
- 커널 메모리에서 복사가 일어나므로 데이터를 읽고 쓰는 속도가 느리다.
- 이 과정에서 임시로 direct Buffer를 만들기 때문에 성능 저하
- gc에서 관리가 되므로 allocate, deallocate가 빠르다.

ByteBuffer
- DirectByteBuffer: allocateDirect() 함수로 생성 가능
- HeapByteBuffer: allocate(), wrap()함수로 생성가능
- isDirect()로 구분 가능

SelectableChannel
- configuraBlocking 과 register함수 제공
- configureBlocking
    serverSocketChannel의 accent, socketChannel의 connect 등의 non-blocking으로 동작

문제점
 - main 쓰레드에서 accept 완료되었는지 주기적으로 확인
 - 각각의 쓰레드에서 read 가능한지 주기적으로 확인
 - 채널 상태를 수동으로 관리해야 하고 코드 복잡성이 증가
 - 동시에 발생하는 요청이 증가하는 경우, 연결 처리가 순차적으로 발생하여 성능 감소

Busy-wait
 - 동기 non-blocking에서 주로 발생
 - 루프를 이용해서 원하는 자원을 얻을 때 까지 확인
 - 지속적으로 cpu를 점유하기 때문에 cpu자원이 낭비
 - 확인하는 주기에 따라서 응답 시간 지연이 발생

동기 non-blociking의 원인?
 - I/O와 관련된 이벤트를 각각의 쓰레드가 확인한다.
 - 채널의 상태를 수동으로 관리해야 한다.

