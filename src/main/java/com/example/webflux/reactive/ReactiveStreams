Reactive란?
 - 무언가를 바꾸거나 예방하기 위해 먼저 행동하기 보다는 사건이나 상황에 반응하는 이라는 뜻이다.
 Reactive manifaesto
    - 소프트에어 아키텍처에 대한 선언문
    - Reactive  System의 특성을 강조하고 구축에 필요한 가이드라인 제공
    - 4가지의 핵심 가치를 제공 : 응답성, 복원력, 메시지 기반, 유연성

 Responsive(응답성)
 - 시스템이 가능한 즉각적으로 응답하는 것을 응답성이 있다고 한다.
 - 문제를 신속하게 탐지하고 효과적으로 대처
 - 신뢰할 수 있는 상한선을 설정하여 일관된 서비스 및 품질을 제공
 결과
 - 가능한 즉각적으로 응답.
 - 사용자의 편의성과 유용성의 기초
 - 오류 처리를 단순화
 -일반 사용자에게 신뢰를 조성하고 새로운 상호작용 촉진

 Resilient (복원력)
 - 시스템이 장애에 직면하더라도 응답성을 유지하는 것을 탄력성이 있다고 한다. 탄력성은 고가용성 시스템,
 미션 크리티컬 시스템에만 적용되지 않습니다. 탄력성이 없는 시스템은 장애가 발생할 경우 응답성을 잃게 된다.
 탄력성은 복제, 봉쇄, 격리, 위임에 의해 실현된다.
 결과
 - 장애에 직면하더라도 응답성을 유지
 - 시스템이 부분적으로 고장이 나더라도 전체 시스템을 위험하게 하지 않고 복구할 수 있도록 보장
 - 구성 요소의 클라이언트는 장애르 ㄹ처리하는데에 압박을 받지 않는다.

 Elastic(유연성)
 - 시스템이 작업량이 변화하더라도 응답성을 유지하는 것을 유연성이라고 한다. 리액티브 시스템은 입력속도의 변화에 따라 이러한 입력에
 할당된 자원을 증가시키거나 감소시키면서 변화에 대응한다.
 결과
 - 작업량이 변화하더라도 응답성을 유지
 - 입력 속도의 변화에 따라 이러한 입력에 할당된 자원을 증가시키거나 감소
 - 상품 및 소프트웨어 플랫폼에 비용 효율이 높은 방식으로 유연성 제공

 Message Driven(메시지 기반)
 - 리액티브 시스템은 비동기 메시지 전달에 의존하여 구성 요소 사이에서 느슨한 결합, 격리, 위치 투명성을 보장하는 경계를 형성
 결과
 - 구성 요소 사이에서 느슨한 결합, 격리 위치 투명성을 보장하는 경계를 형성 이 경계는 장애를 메시지로 지정하는 수단을 제공
 - 시스템에 메시지 큐를 생성하고 모니터링 하며 필요시 배압을 적용
 - 유연성을 부여하고 부하 관리와 흐름 제어를 가능하게 한다.

 핵심 가치
 - 가능한 즉각적으로 응답
 첫번 째 형태 : 장애애 직면하더라도 응답성을 유지
 두번 쨰 형태 : 작업량이 변화하더라도 응답성을 유지
 방법 : 비동기 non-blocking 기반의 메시지 큐를 사용하여 통신한다.

Reactive Programming
- 비동기 데이터 stream을 사용하는 패러다임
- 모든 것이 이벤트로 구성되고 이벤트를 통해서 전파되어야 한다.
    - event-driven 해야한다.
    - 데이터의 전달, 에러, 완료까지 모두 이벤트로 취급
-Reactive manifesto의 Responsive, Resilient, Elastic, Message Driven까지 모두 해당.

Event-Driven vs message-driven
- Message : event, command, query등 다양한 형태를 수용
- Message-driven은 event, command, query등 다양한 형태의 메시지를 비동기적으로 가능하다면 배압을 적용해서 잔달하는 형태에 집중
- event-driven은 message의 형태를 evnet로 제한
- completion, error 심지어 값 까지도 이벤트의 형태로 전달
- 따라서 reactive Programming은 reactive manifesto의 원칙을 지킨다.

구조
- Publisher, Subscriber, Subscription

Publisher
- subscribe 함수 제공해서 publisher에 다수의 subscirber 등록 지원
- subscription을 포함하고 Subscriber가 추가되면 subscription을 제공

Subscriber
- subscribe하는 시점에 publisher로 부터 subscription을 받을 수 있는 인자 제공
- onNext, onError, onComplete를 통해서 값이나 이벤트를 받을 수 있다.
- onNext는 여러 번 onError, onComplete는 딱 한번 호출된다.

Subscription
- back-pressure를 조절할 수 있는 request함수
- publisher가 onNext를 통해서 값을 전달하는 것을 취소할 수 있는 cancel 함수

FixedIntPublisher
- Flow, Publisher를 구현
- 고정된 숫자의 integer를 전달하는 publisher
- 8개의 integer를 전달 후 complete
- iterator를 생성해서 subscription을 생성하고 subscriber에게 전달

IntSubscription
- flow.Subscription을 구현
- subscriber의 onNext와 subscription의 request가 동기적으로 동작하면 안되기 때문에 executor를 이용해서 별도의 쓰레드에서 실행
- 욫어 횟수를 count에 저장하고 결과에 함께 전달
- 더 이상 iterator에 값이 없으면 onComplete를 호출


